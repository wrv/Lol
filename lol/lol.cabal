name:                lol
-- The package version.  See the Haskell package versioning policy (PVP)
-- for standards guiding when and how versions should be incremented.
-- http://www.haskell.org/haskellwiki/Package_versioning_policy
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- non-breaking API additions
--                   | | | +--- code changes with no API change
version:             0.4.0.0
synopsis:            A library for lattice cryptography.
homepage:            https://github.com/cpeikert/Lol
Bug-Reports:         https://github.com/cpeikert/Lol/issues
license:             GPL-2
license-file:        LICENSE
author:              Eric Crockett <ecrockett0@gmail.com>, Chris Peikert <cpeikert@alum.mit.edu>
maintainer:          Eric Crockett <ecrockett0@gmail.com>
copyright:           Eric Crockett, Chris Peikert
category:            Crypto
stability:           experimental
build-type:          Simple
cabal-version:       >= 1.10
description:
    Λ ○ λ (Lol) is a general-purpose library for ring-based lattice cryptography.
    For a detailed description of interfaces and functionality, see
    <https://eprint.iacr.org/2015/1134 Λ ○ λ: A Functional Library for Lattice Cryptography>.
    For example cryptographic applications, see <https://hackage.haskell.org/package/lol-apps lol-apps>.
source-repository head
  type: git
  location: https://github.com/cpeikert/Lol

-- For information on compiling C with cabal: http://blog.ezyang.com/2010/06/setting-up-cabal-the-ffi-and-c2hs/

Flag llvm
  Description:  Compile via LLVM. This produces much better object code,
                but you need to have the LLVM compiler installed.
  -- If you enable this and get errors like "Error: can't resolve `.rodata' {.rodata section}"
  -- then GHC doesn't like your version of LLVM!
  Default:      False

Flag opt
  Description: Turn on library optimizations
  Default:     True

library
  default-language:   Haskell2010
  ghc-options: -fwarn-dodgy-imports
  cc-options: -std=c++11
  Include-dirs: Crypto/Lol/Cyclotomic/Tensor/CTensor
  -- Due to #12152, the file containing the definition of `Zq::q` must be linked first,
  -- otherwise dynamic linking (`cabal repl` or `stack ghci`) results in the error:
  -- "Loading temp shared object failed: /tmp/ghc54651_0/libghc_1.so: undefined symbol _ZN2Zq1qE"
  -- For `cabal repl`, we can simply reorder the list so that the file that should be linked
  -- first comes first in the list. However `stack ghci` always links alphabetically,
  -- so we really just have to define `Zq::q` in the first file alphabetically.
  C-sources: Crypto/Lol/Cyclotomic/Tensor/CTensor/l.cpp

  if flag(llvm)
    ghc-options: -fllvm -optlo-O3

  -- ghc optimizations
  if flag(opt)
    ghc-options: -O3 -Wall -Odph -funbox-strict-fields -fno-liberate-case -funfolding-use-threshold1000 -funfolding-keeness-factor1000

  exposed-modules:
    Crypto.Lol.Cyclotomic.UCyc
    Crypto.Lol.Cyclotomic.Tensor.CTensor
    Crypto.Lol.FactoredDefs

  other-modules:
    Crypto.Lol.PosBinDefs
    Crypto.Lol.Cyclotomic.Tensor.CTensor.Backend

  build-depends:
    base>=4.8 && <5,
    deepseq >= 1.4.1.1 && <1.5,
    singletons >= 1.1.2.1 && < 2.2,
    storable-record >= 0.0.3 && < 0.1,
    tagged,
    vector==0.11.*

Benchmark bench-lol
  type:               exitcode-stdio-1.0
  hs-source-dirs:     benchmarks
  default-language:   Haskell2010
  main-is:            Main.hs

  if flag(llvm)
    ghc-options: -fllvm -optlo-O3
  -- ghc-options: -threaded -rtsopts
  ghc-options: -O3 -Wall -Odph -funbox-strict-fields -fno-liberate-case -funfolding-use-threshold1000 -funfolding-keeness-factor1000
  -- ghc-options: -O2 -Odph -funbox-strict-fields -fwarn-dodgy-imports -rtsopts
  -- ghc-options: -fno-liberate-case -funfolding-use-threshold1000 -funfolding-keeness-factor1000
  ghc-options: -dcore-lint -ddump-to-file -ddump-core-stats -ddump-simpl -dsuppress-idinfo -dsuppress-coercions -dsuppress-type-applications -dsuppress-uniques -dsuppress-module-prefixes
  build-depends:
    base,
    criterion,
    lol
